<?php
namespace Sizzle\Tests;

use \Sizzle\{
    EmailOpen,
    RecruitingToken,
    User
};

/**
 * This class tests the EmailOpen class
 *
 * ./vendor/bin/phpunit --bootstrap src/tests/autoload.php src/tests/EmailOpenTest
 */
class EmailOpenTest
extends \PHPUnit_Framework_TestCase
{
    /**
     * Requires the util.php file of functions
     */
    public static function setUpBeforeClass()
    {
        include_once __DIR__.'/../../util.php';
    }

    /**
     * Tests the __construct function.
     */
    public function testConstructor()
    {
        // no params
        $result = new EmailOpen();
        $this->assertEquals('Sizzle\EmailOpen', get_class($result));

        // test with bad id
        $result2 = new EmailOpen(-1);
        $this->assertFalse(isset($result2->id));

        // test with good id in testCreate() below
    }

    /**
     * Tests the create function.
     */
    public function testCreate()
    {
        $template = 1; //signup
        $email = rand().'@gosizzle.io';

        // Create open
        $emailOpen = new EmailOpen();
        $id = $emailOpen->create($template, $email);

        // Check class variables set
        $this->assertEquals($emailOpen->id, $id);
        $this->assertEquals($emailOpen->email_template_id, $template);
        $this->assertEquals($emailOpen->email_address, $email);
        $this->assertFalse(isset($emailOpen->recruiting_token_id));

        // See if open was saved in DB
        $emailOpen2 = new EmailOpen($id);
        $this->assertEquals($emailOpen2->id, $id);
        $this->assertEquals($emailOpen2->email_template_id, $template);
        $this->assertEquals($emailOpen2->email_address, $email);
        $this->assertFalse(isset($emailOpen2->recruiting_token_id));
    }

    /**
     * Tests the create function with a token.
     */
    public function testCreateWithToken()
    {
        $template = 3; // recruiting token email
        $email = rand().'@gosizzle.io';
        $User = new User();
        $User->email_address = rand();
        $User->first_name = rand();
        $User->last_name = rand();
        $User->save();
        $token = new RecruitingToken();
        $token->user_id = $User->getId();
        $token->long_id = substr(md5(microtime()), rand(0, 26), 20);
        $token->save();

        // Create open
        $emailOpen = new EmailOpen();
        $id = $emailOpen->create($template, $email, $token->id);

        // Check class variables set
        $this->assertEquals($emailOpen->id, $id);
        $this->assertEquals($emailOpen->email_template_id, $template);
        $this->assertEquals($emailOpen->email_address, $email);
        $this->assertEquals($emailOpen->recruiting_token_id, $token->id);

        // See if open was saved in DB
        $emailOpen2 = new EmailOpen($id);
        $this->assertEquals($emailOpen2->id, $id);
        $this->assertEquals($emailOpen2->email_template_id, $template);
        $this->assertEquals($emailOpen2->email_address, $email);
        $this->assertEquals($emailOpen2->recruiting_token_id, $token->id);
    }
}
