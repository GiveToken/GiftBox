<?php
namespace Sizzle\Tests\Track;

use \Sizzle\Database\{
    EmailOpen,
    RecruitingToken,
    User
};

/**
 * This class tests the tracking endpoint for email opens.
 *
 * ./vendor/bin/phpunit --bootstrap src/Tests/autoload.php src/Tests/Track/OpenTest
 */
class OpenTest
extends \PHPUnit_Framework_TestCase
{
    /**
     * Requires the util.php file of functions
     */
    public static function setUpBeforeClass()
    {
        include_once __DIR__.'/../../../util.php';
    }

    /**
     * Sets up test variables
     */
    public function setUp()
    {
        $this->url = TEST_URL . "/track/open";
    }

    /**
     * Tests signup email open
     */
    public function testSignup()
    {
        $email = rand().'@givetoken.com';

        // get count before hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countBefore = $row['opens'];
        $this->assertEquals(0, $countBefore);

        // hit the tracking link
        $fields = array(
            't'=>1,
            'e'=>$email
        );
        $fields_string = "";
        foreach ($fields as $key=>$value) {
            $fields_string .= $key.'='.$value.'&';
        }
        $fields_string = rtrim($fields_string, '&');
        ob_start();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->url.'?'.$fields_string);
        $response = curl_exec($ch);
        $this->assertEquals(true, $response);
        $return = ob_get_contents();
        ob_end_clean();
        $this->assertEquals('', $return);

        // get count after hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countAfter = $row['opens'];
        $this->assertEquals(1, $countAfter);
    }

    /**
     * Tests password reset email open
     */
    public function testPasswordReset()
    {
        $email = rand().'@givetoken.com';

        // get count before hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countBefore = $row['opens'];
        $this->assertEquals(0, $countBefore);

        // hit the tracking link
        $fields = array(
            't'=>2,
            'e'=>$email
        );
        $fields_string = "";
        foreach ($fields as $key=>$value) {
            $fields_string .= $key.'='.$value.'&';
        }
        $fields_string = rtrim($fields_string, '&');
        ob_start();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->url.'?'.$fields_string);
        $response = curl_exec($ch);
        $this->assertEquals(true, $response);
        $return = ob_get_contents();
        ob_end_clean();
        $this->assertEquals('', $return);

        // get count after hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countAfter = $row['opens'];
        $this->assertEquals(1, $countAfter);
    }

    /**
     * Tests a bad template id
     */
    public function testBadTemplate()
    {
        $email = rand().'@givetoken.com';

        // get count before hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countBefore = $row['opens'];
        $this->assertEquals(0, $countBefore);

        // hit the tracking link
        $fields = array(
            't'=>'blue',
            'e'=>$email
        );
        $fields_string = "";
        foreach ($fields as $key=>$value) {
            $fields_string .= $key.'='.$value.'&';
        }
        $fields_string = rtrim($fields_string, '&');
        ob_start();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->url.'?'.$fields_string);
        $response = curl_exec($ch);
        $this->assertEquals(true, $response);
        $return = ob_get_contents();
        ob_end_clean();
        $this->assertEquals('', $return);

        // get count after hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countAfter = $row['opens'];
        $this->assertEquals(0, $countAfter);
    }

    /**
     * Tests a bad email
     */
    public function testBadEmail()
    {
        $email = 'blue';

        // get count before hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countBefore = $row['opens'];
        $this->assertEquals(0, $countBefore);

        // hit the tracking link
        $fields = array(
            't'=>1,
            'e'=>$email
        );
        $fields_string = "";
        foreach ($fields as $key=>$value) {
            $fields_string .= $key.'='.$value.'&';
        }
        $fields_string = rtrim($fields_string, '&');
        ob_start();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->url.'?'.$fields_string);
        $response = curl_exec($ch);
        $this->assertEquals(true, $response);
        $return = ob_get_contents();
        ob_end_clean();
        $this->assertEquals('', $return);

        // get count after hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countAfter = $row['opens'];
        $this->assertEquals(0, $countAfter);
    }

    /**
     * Tests recruiting token email open
     */
    public function testRecruitingToken()
    {
        $email = rand().'@givetoken.com';

        // get count before hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countBefore = $row['opens'];
        $this->assertEquals(0, $countBefore);

        // setup the token
        $User = new User();
        $User->email_address = rand();
        $User->first_name = rand();
        $User->last_name = rand();
        $User->save();
        $token = new RecruitingToken();
        $token->user_id = $User->getId();
        $token->long_id = substr(md5(microtime()), rand(0, 26), 20);
        $token->save();

        // hit the tracking link
        $fields = array(
            't'=>3,
            'e'=>$email,
            'l'=>$token->long_id
        );
        $fields_string = "";
        foreach ($fields as $key=>$value) {
            $fields_string .= $key.'='.$value.'&';
        }
        $fields_string = rtrim($fields_string, '&');
        ob_start();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->url.'?'.$fields_string);
        $response = curl_exec($ch);
        $this->assertEquals(true, $response);
        $return = ob_get_contents();
        ob_end_clean();
        $this->assertEquals('', $return);

        // get count after hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countAfter = $row['opens'];
        $this->assertEquals(1, $countAfter);
    }

    /**
     * Tests a bogus recruiting token long id
     */
    public function testBadRecruitingToken()
    {
        $email = rand().'@givetoken.com';

        // get count before hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countBefore = $row['opens'];
        $this->assertEquals(0, $countBefore);

        // setup the token
        $User = new User();
        $User->email_address = rand();
        $User->first_name = rand();
        $User->last_name = rand();
        $User->save();
        $token = new RecruitingToken();
        $token->user_id = $User->getId();
        $token->long_id = substr(md5(microtime()), rand(0, 26), 20);
        $token->save();

        // hit the tracking link
        $fields = array(
            't'=>3,
            'e'=>$email,
            'l'=>'blue'
        );
        $fields_string = "";
        foreach ($fields as $key=>$value) {
            $fields_string .= $key.'='.$value.'&';
        }
        $fields_string = rtrim($fields_string, '&');
        ob_start();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->url.'?'.$fields_string);
        $response = curl_exec($ch);
        $this->assertEquals(true, $response);
        $return = ob_get_contents();
        ob_end_clean();
        $this->assertEquals('', $return);

        // get count after hitting the tracking link
        $sql = "SELECT COUNT(*) opens FROM email_open WHERE email_address = '$email'";
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countAfter = $row['opens'];
        $this->assertEquals(0, $countAfter);
    }

    /**
     * Tests request failure via ajax endpoint.
     */
    public function testFail()
    {
        // get count before hitting the tracking link
        $sql = 'SELECT COUNT(*) opens FROM email_open';
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countBefore = $row['opens'];

        // hit the tracking link
        ob_start();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_URL, $this->url);
        $response = curl_exec($ch);
        $this->assertEquals(true, $response);
        $return = ob_get_contents();
        ob_end_clean();
        $this->assertEquals('', $return);

        // get count after hitting the tracking link
        $sql = 'SELECT COUNT(*) opens FROM email_open';
        $result = execute_query($sql);
        $row = $result->fetch_assoc();
        $countAfter = $row['opens'];

        $this->assertEquals($countBefore, $countAfter);
    }
}
?>
